{
  "aql_reference_guide": {
    "overview": {
      "description": "Comprehensive AQL reference based on production usage patterns and known limitations",
      "purpose": "Primary reference for writing reliable AQL queries and troubleshooting syntax issues"
    },

    "common_error_patterns_solutions": {
      "syntax_validation_failures": [
        {
          "error_type": "DISTINCT usage",
          "wrong_example": "SELECT DISTINCT extension FROM STORE('/') WHERE ClassID = 'idxobject'",
          "correct_example": "SELECT extension FROM STORE('/') WHERE ClassID = 'idxobject' GROUP BY extension",
          "description": "DISTINCT will fail validation - use GROUP BY instead"
        },
        {
          "error_type": "DATEADD usage",
          "wrong_example": "WHERE createTime > DATEADD(day, -30, NOW())",
          "correct_example": "WHERE (cast(NOW() as number) - createTime) < (30 * 24 * 60 * 60)",
          "description": "DATEADD not supported - use time arithmetic"
        }
      ],
      "null_handling_issues": [
        {
          "problem": "May include unexpected nulls in classification filtering",
          "problematic_example": "WHERE classification != 'Unclassified'",
          "safer_example": "WHERE classification IS NOT NULL AND classification != 'Unclassified'",
          "description": "Always explicitly handle NULL values"
        }
      ],
      "metadata_query_mistakes": [
        {
          "error_type": "JSON parsing attempts",
          "wrong_example": "WHERE JSON_EXTRACT(metadata, '$.Author') = 'John'",
          "correct_example": "WHERE metadata LIKE '%\"Author\":\"John\"%'",
          "description": "Use string pattern matching instead of JSON functions"
        }
      ]
    },

    "pre_deployment_testing_checklist": {
      "syntax_validation": [
        "Query validates successfully via API with 'validate': true",
        "No DATEADD functions used",
        "No DISTINCT keywords used", 
        "All time calculations use cast(NOW() as number) pattern"
      ],
      "data_integrity_checks": [
        "GROUP BY used instead of DISTINCT for deduplication",
        "Classification filters handle 'Unclassified' properly",
        "NULL values handled with COALESCE or CASE statements",
        "Size calculations use correct divisors (1073741824 for GB, 1048576 for MB)"
      ],
      "performance_verification": [
        "WHERE clause includes ClassID = 'idxobject'",
        "Complex CASE statements optimized",
        "Result set size reasonable for intended use"
      ]
    },

    "reference_templates": {
      "standard_query_template": {
        "template": "SELECT COMPONENTS(parentPath, 3) AS \"Data Source\", COUNT(name) AS \"File Count\", SUM(size)/1073741824 AS \"Size (GB)\" FROM STORE('/') WHERE ClassID = 'idxobject' GROUP BY COMPONENTS(parentPath, 3) ORDER BY \"Size (GB)\" DESC",
        "description": "Basic template with data source analysis",
        "customization_points": [
          "Replace field selections as needed",
          "Add specific WHERE conditions",
          "Modify GROUP BY clause",
          "Adjust ORDER BY for different sorting"
        ]
      },
      "time_range_analysis_template": {
        "template": "SELECT CASE WHEN (cast(NOW() as number) - createTime) < (365 * 24 * 60 * 60) THEN 'Recent' WHEN (cast(NOW() as number) - createTime) BETWEEN (365 * 24 * 60 * 60) AND (730 * 24 * 60 * 60) THEN 'Older' ELSE 'Very Old' END AS \"Age Category\", COUNT(*) AS \"Count\", SUM(size)/1073741824 AS \"Size (GB)\" FROM STORE('/') WHERE ClassID = 'idxobject' GROUP BY CASE WHEN (cast(NOW() as number) - createTime) < (365 * 24 * 60 * 60) THEN 'Recent' WHEN (cast(NOW() as number) - createTime) BETWEEN (365 * 24 * 60 * 60) AND (730 * 24 * 60 * 60) THEN 'Older' ELSE 'Very Old' END",
        "description": "Template for age-based file analysis"
      }
    },

    "natural_language_translation_examples": [
      {
        "natural_language": "My data is growing 200GB per week and I don't know why",
        "query_type": "growth_analysis",
        "aql_query": "SELECT YEAR(createTime) AS \"Year\", WEEK(createTime) AS \"Week\", extension AS \"File Type\", COUNT(*) AS \"Files Created\", SUM(size)/1073741824 AS \"Size Added (GB)\" WHERE createTime >= '2024-01-01' AND ClassID = 'idxobject' GROUP BY YEAR(createTime), WEEK(createTime), extension ORDER BY \"Year\", \"Week\", \"Size Added (GB)\" DESC",
        "explanation": "Analyzes file creation patterns by week and type to identify growth sources"
      },
      {
        "natural_language": "Show me storage waste from duplicate files",
        "query_type": "duplicate_analysis", 
        "aql_query": "SELECT SUM(CASE WHEN dupCount > 1 THEN 1 ELSE 0 END) AS \"Files with Duplicates\", SUM(CASE WHEN dupCount > 1 THEN dupCount - 1 ELSE 0 END) AS \"Duplicate Instances\", SUM(CASE WHEN dupCount > 1 THEN size * (dupCount - 1) ELSE 0 END)/1073741824 AS \"Potential Space Savings (GB)\" FROM STORE('/') WHERE dupCount > 1 AND ClassID = 'idxobject'",
        "explanation": "Calculates duplicate file counts and potential space savings"
      }
    ],

    "proven_working_patterns": {
      "time_implementation": {
        "current_time_as_number": {
          "pattern": "cast(NOW() as number)",
          "description": "Gets current time as Unix timestamp style number for arithmetic"
        },
        "time_range_calculations": [
          {
            "description": "Last 30 days",
            "pattern": "WHERE (cast(NOW() as number) - accessTime) < (30 * 24 * 60 * 60)"
          },
          {
            "description": "Last year",
            "pattern": "WHERE (cast(NOW() as number) - createTime) < (365 * 24 * 60 * 60)"
          }
        ]
      },
      "essential_query_structure": {
        "standard_template": "SELECT column1 AS \"Display Name\", SUM(size)/1073741824 AS \"Size (GB)\" FROM STORE('/') WHERE ClassID = 'idxobject' AND additional_conditions GROUP BY column1 ORDER BY \"Size (GB)\" DESC LIMIT 50",
        "required_elements": [
          "FROM STORE('/') - AQL data source function",
          "WHERE ClassID = 'idxobject' - Always filter by object type",
          "Use aliases for readability",
          "Consider LIMIT for large datasets"
        ]
      }
    },

    "known_issues_limitations": {
      "date_time_functions": {
        "dateadd_function": {
          "status": "NOT_SUPPORTED",
          "description": "DATEADD function will cause syntax validation failures",
          "alternative": "Use time arithmetic with cast(NOW() as number) and seconds"
        }
      },
      "aggregation_functions": {
        "distinct_keyword": {
          "status": "UNRELIABLE",
          "description": "DISTINCT keyword is unreliable or non-functional",
          "workaround": "Always use GROUP BY for deduplication"
        }
      },
      "metadata_handling": {
        "json_functions": {
          "status": "NOT_SUPPORTED",
          "description": "No support for JSON_EXTRACT(), CAST() from metadata, or JSON parsing",
          "limitation": "Cannot parse metadata as JSON objects",
          "workaround": "Use metadata LIKE '%\"key\":\"value\"%' for filtering"
        }
      }
    },

    "aparavi_api_integration": {
      "endpoint_configuration": {
        "base_url": "http://localhost/server/api/v3/database/query",
        "method": "GET",
        "authentication": "HTTP Basic Auth (base64(username:password))"
      },
      "query_parameters": [
        {
          "parameter": "select",
          "description": "URL-encoded AQL query string",
          "required": true
        },
        {
          "parameter": "options",
          "description": "JSON string with execution options",
          "required": true
        }
      ]
    },

    "core_fields_reference": [
      {
        "field": "name",
        "description": "File name",
        "usage_context": "SELECT/WHERE",
        "data_type": "string",
        "example_usage": "WHERE name LIKE '%.pdf'",
        "common_patterns": ["name LIKE '%.ext'", "name = 'filename.txt'"]
      },
      {
        "field": "size",
        "description": "Size in bytes",
        "usage_context": "SELECT/WHERE",
        "data_type": "number",
        "example_usage": "WHERE size > 104857600",
        "common_patterns": [
          "size > 104857600",
          "SUM(size)/1073741824 AS \"Size (GB)\"",
          "AVG(size)/1048576 AS \"Avg Size (MB)\""
        ]
      },
      {
        "field": "extension",
        "description": "File extension",
        "usage_context": "SELECT/WHERE",
        "data_type": "string",
        "example_usage": "WHERE extension = 'pdf'",
        "common_patterns": [
          "extension = 'pdf'",
          "extension IN ('doc', 'docx', 'pdf')",
          "GROUP BY extension"
        ]
      },
      {
        "field": "createTime",
        "description": "Created time",
        "usage_context": "SELECT/WHERE",
        "data_type": "timestamp",
        "example_usage": "WHERE createTime >= '2024-01-01'",
        "common_patterns": [
          "createTime >= 'YYYY-MM-DD'",
          "YEAR(createTime)",
          "MONTH(createTime)",
          "WEEK(createTime)"
        ]
      },
      {
        "field": "classification",
        "description": "Primary classification",
        "usage_context": "SELECT/WHERE",
        "data_type": "string",
        "example_usage": "WHERE classification = 'PII'",
        "common_patterns": [
          "classification = 'PII'",
          "classification IS NOT NULL",
          "classification != 'Unclassified'"
        ]
      },
      {
        "field": "dupCount",
        "description": "Number of duplicate files",
        "usage_context": "SELECT/WHERE",
        "data_type": "number",
        "example_usage": "WHERE dupCount > 1",
        "common_patterns": [
          "dupCount > 1",
          "SUM(CASE WHEN dupCount > 1 THEN dupCount - 1 ELSE 0 END)"
        ]
      },
      {
        "field": "ClassID",
        "description": "Object type identifier",
        "usage_context": "WHERE",
        "data_type": "string",
        "example_usage": "WHERE ClassID = 'idxobject'",
        "common_patterns": [
          "ClassID = 'idxobject'",
          "ClassID LIKE 'idxobject'"
        ]
      }
    ]
  }
}